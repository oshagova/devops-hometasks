pipeline {
    agent any
    
    tools{
        go 'Go 1.13.15'
    }
    options {
        timestamps()
    }
    
    stages{
        stage('Get source code'){
            steps{
                git 'https://github.com/oshagova/word-cloud-generator.git'
            }
        }
        
        stage('Using Make tests'){
            steps{
                sh '''export GOPATH=$WORKSPACE
                export PATH="$PATH:$(go env GOPATH)/bin"
                go get github.com/GeertJohan/go.rice/rice
                go get github.com/oshagova/word-cloud-generator/wordyapi
                go get github.com/gorilla/mux
                make lint
                make test'''
            }
        }
        
        stage('Build job'){
            steps{
                sh '''export GOPATH=$WORKSPACE
                export PATH="$PATH:$(go env GOPATH)/bin"

                go get github.com/tools/godep
                go get github.com/smartystreets/goconvey
                go get github.com/GeertJohan/go.rice/rice
                go get github.com/oshagova/word-cloud-generator/wordyapi
                go get github.com/gorilla/mux

                GOOS=linux GOARCH=amd64 go build -o ./artifacts/word-cloud-generator -v .
                gzip -c ./artifacts/word-cloud-generator > ./artifacts/word-cloud-generator.gz
                rm ./artifacts/word-cloud-generator
                mv ./artifacts/word-cloud-generator.gz ./artifacts/word-cloud-generator
                ls -l artifacts'''
            }
        }
        stage('Upload artifacts'){
            steps{
                nexusArtifactUploader artifacts: [[artifactId: 'word-cloud-generator', classifier: '', file: 'artifacts/word-cloud-generator', type: 'gz']], credentialsId: 'nexus-creds', groupId: 'web-app-pipeline', nexusUrl: '192.168.33.11:8081/', nexusVersion: 'nexus3', protocol: 'http', repository: 'word-cloud-generator', version: '1.$BUILD_NUMBER'
            }
        }
        stage('Deploy staging'){
            steps{
                script {
                     def remote = [name: 'staging', host: '192.168.33.12', user: 'vagrant', password: 'vagrant', allowAnyHosts: true]
                     
                     sshCommand remote: remote, command: "curl -X GET -u admin:admin \"http://192.168.33.11:8081/repository/word-cloud-generator/web-app-pipeline/word-cloud-generator/1.${env.BUILD_NUMBER}/word-cloud-generator-1.${env.BUILD_NUMBER}.gz\" -o /opt/wordcloud/word-cloud-generator.gz"
                     sshCommand remote: remote, command: "gunzip -f /opt/wordcloud/word-cloud-generator.gz"
                     sshCommand remote: remote, command: "chmod +x /opt/wordcloud/word-cloud-generator"
                     sshCommand remote: remote, command: "sudo service wordcloud start "
                }     
            }
        }
        
        stage('Parallel tests'){
            parallel{
                stage('Tests #1'){
                    agent any
                    steps{
                        sh '''res=`curl -s -H "Content-Type: application/json" -d \'{"text":"ths is a really really really important thing this is"}\' http://192.168.33.12:8888/version | jq \'. | length\'`
                        if [ "1" != "$res" ]; then
                          exit 99
                        fi

                        res=`curl -s -H "Content-Type: application/json" -d \'{"text":"ths is a really really really important thing this is"}\' http://192.168.33.12:8888/api | jq \'. | length\'`
                        if [ "7" != "$res" ]; then
                          exit 99
                        fi'''
                    }
                }
                
                stage('Tests #2'){
                    agent any
                    steps{
                        sh '''res=`curl -s -H "Content-Type: application/json" -d \'{"text":"ths is a really really really important thing this is"}\' http://192.168.33.12:8888/version | jq \'. | length\'`
                        if [ "1" != "$res" ]; then
                          exit 99
                        fi

                        res=`curl -s -H "Content-Type: application/json" -d \'{"text":"ths is a really really really important thing this is"}\' http://192.168.33.12:8888/api | jq \'. | length\'`
                        if [ "7" != "$res" ]; then
                          exit 99
                        fi'''
                    }
                }
            }
        }
        stage('Deploy production'){
            steps{
                script {
                     def remote = [name: 'staging', host: '192.168.33.13', user: 'vagrant', password: 'vagrant', allowAnyHosts: true]
                     
                     sshCommand remote: remote, command: "curl -X GET -u admin:admin \"http://192.168.33.11:8081/repository/word-cloud-generator/web-app-pipeline/word-cloud-generator/1.${env.BUILD_NUMBER}/word-cloud-generator-1.${env.BUILD_NUMBER}.gz\" -o /opt/wordcloud/word-cloud-generator.gz"
                     sshCommand remote: remote, command: "gunzip -f /opt/wordcloud/word-cloud-generator.gz"
                     sshCommand remote: remote, command: "chmod +x /opt/wordcloud/word-cloud-generator"
                     sshCommand remote: remote, command: "sudo service wordcloud start "
                }     
            }
        }
    }
}